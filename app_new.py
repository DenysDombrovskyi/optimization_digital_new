import streamlit as st
import pandas as pd
import numpy as np
import io
from openpyxl import Workbook
from openpyxl.utils.dataframe import dataframe_to_rows
from openpyxl.chart import BarChart, Reference
from openpyxl.styles import numbers
from pulp import *
from PIL import Image # –Ü–º–ø–æ—Ä—Ç—É—î–º–æ –±—ñ–±–ª—ñ–æ—Ç–µ–∫—É Pillow –¥–ª—è —Ä–æ–±–æ—Ç–∏ —ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º–∏

st.set_page_config(page_title="Digital Split Optimizer", layout="wide")

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –ª–æ–≥–æ—Ç–∏–ø
try:
    # –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ 'image_9e34e0.png' –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç—ñ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—ó, —â–æ –π —Å–∫—Ä–∏–ø—Ç
    logo = Image.open("image_9e34e0.png")
    st.image(logo, width=200) # –ú–æ–∂–µ—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ —à–∏—Ä–∏–Ω—É –∑–∞ –ø–æ—Ç—Ä–µ–±–∏
except FileNotFoundError:
    st.warning("–§–∞–π–ª –ª–æ–≥–æ—Ç–∏–ø—É 'image_9e34e0.png' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –≤—ñ–Ω –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–¥–Ω—ñ–π –ø–∞–ø—Ü—ñ –∑—ñ —Å–∫—Ä–∏–ø—Ç–æ–º.")
except Exception as e:
    st.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ª–æ–≥–æ—Ç–∏–ø—É: {e}")


st.title("Digital Split Optimizer ‚Äì –ì—ñ–±—Ä–∏–¥–Ω–∏–π —Å–ø–ª—ñ—Ç")

# ==== –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ====
optimization_goal = st.radio(
    "–û–±–µ—Ä—ñ—Ç—å –º–µ—Ç—É –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:",
    ('–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è', '–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –±—é–¥–∂–µ—Ç—É'),
    horizontal=True
)
st.markdown("---")

num_instruments = st.number_input("–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤:", min_value=1, max_value=50, value=25, step=1)
total_audience = st.number_input("–ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–æ—ó –∞—É–¥–∏—Ç–æ—Ä—ñ—ó:", value=50000, step=1000)

if optimization_goal == '–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è':
    total_budget = st.number_input("–ó–∞–¥–∞–Ω–∏–π –±—é–¥–∂–µ—Ç ($):", value=100000, step=1000)
else:
    reach_target_pct = st.number_input("–ë–∞–∂–∞–Ω–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (%):", min_value=1, max_value=100, value=50, step=1)
    
# ==== –ü–æ—á–∞—Ç–∫–æ–≤—ñ –¥–∞–Ω—ñ ====
# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–±–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è DataFrame –Ω–∞ –æ—Å–Ω–æ–≤—ñ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤
if "df" not in st.session_state or len(st.session_state.df) != num_instruments:
    st.session_state.df = pd.DataFrame({
        "Instrument": [f"Instrument {i+1}" for i in range(num_instruments)],
        "CPM": [50 + i*2 for i in range(num_instruments)],
        "Freq": [1.0 + 0.05*i for i in range(num_instruments)],
        "MinShare": [0.01 for _ in range(num_instruments)],
        "MaxShare": [0.15 for i in range(num_instruments)]
    })

df = st.session_state.df.copy()

# ==== –§–æ—Ä–º–∞ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è ====
with st.form("instrument_form"):
    st.subheader("–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤")
    # –î–∏–Ω–∞–º—ñ—á–Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ –≤–≤–æ–¥—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    for i in range(len(df)):
        st.markdown(f"**–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç {i+1}**")
        col1, col2, col3, col4, col5 = st.columns(5)
        with col1:
            df.loc[i, "Instrument"] = st.text_input(f"–ù–∞–∑–≤–∞", value=df.loc[i, "Instrument"], key=f"name_{i}")
        with col2:
            df.loc[i, "CPM"] = st.number_input(f"CPM", value=float(df.loc[i, "CPM"]), step=1.0, key=f"cpm_{i}")
        with col3:
            df.loc[i, "Freq"] = st.number_input(f"Frequency", value=float(df.loc[i, "Freq"]), step=0.01, key=f"freq_{i}")
        with col4:
            df.loc[i, "MinShare"] = st.number_input(f"Min Share", value=float(df.loc[i, "MinShare"]), step=0.01, min_value=0.0, max_value=1.0, key=f"min_share_{i}")
        with col5:
            df.loc[i, "MaxShare"] = st.number_input(f"Max Share", value=float(df.loc[i, "MaxShare"]), step=0.01, min_value=0.0, max_value=1.0, key=f"max_share_{i}")
        st.markdown("---") # –í—ñ–¥–æ–∫—Ä–µ–º–ª—é–≤–∞—á –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
    submitted = st.form_submit_button("–ü–µ—Ä–µ—Ä–∞—Ö—É–≤–∞—Ç–∏ —Å–ø–ª—ñ—Ç")

if submitted:
    st.session_state.df = df.copy() # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–∏–π DataFrame –≤ session_state
    
    # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ —Ç–∞ CPR –¥–ª—è –≤—Å—ñ—Ö –≤–∏–ø–∞–¥–∫—ñ–≤
    df["Efficiency"] = 1000 / (df["CPM"] * df["Freq"])
    # CPR —Ä–æ–∑—Ä–∞—Ö–æ–≤—É—î—Ç—å—Å—è —è–∫ CPM / 1000 * Freq. –£–Ω–∏–∫–∞—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å, —è–∫—â–æ Freq –¥–æ—Ä—ñ–≤–Ω—é—î 0.
    df["CPR"] = np.where(df["Freq"] != 0, df["CPM"] / 1000 * df["Freq"], np.inf)
    
    # –§—É–Ω–∫—Ü—ñ—è —Ä–æ–∑—Ä–∞—Ö—É–Ω–∫—É –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (–Ω–µ–ª—ñ–Ω—ñ–π–Ω–∞, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—ñ–ª—å–∫–∏ –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ)
    def total_reach(budgets, df_current, total_audience_val):
        # –ü–µ—Ä–µ—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—ñ–≤ –Ω–∞ –º–∞—Å–∏–≤ numpy –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–∏—Ö –æ–ø–µ—Ä–∞—Ü—ñ–π
        budgets_array = np.array(budgets)
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–æ–∫–∞–∑–Ω–∏–∫—ñ–≤ Impression. –£–Ω–∏–∫–∞—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å, —è–∫—â–æ CPM –¥–æ—Ä—ñ–≤–Ω—é—î 0.
        impressions = np.where(df_current["CPM"].values != 0, budgets_array / df_current["CPM"].values * 1000, 0)
        
        # –û–±—á–∏—Å–ª–µ–Ω–Ω—è Reach_i. –£–Ω–∏–∫–∞—î–º–æ –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å, —è–∫—â–æ Freq –¥–æ—Ä—ñ–≤–Ω—é—î 0.
        reach_i = np.where(
            df_current["Freq"].values != 0, 
            impressions / df_current["Freq"].values / total_audience_val, 
            0
        )
        
        # –û–±–º–µ–∂–µ–Ω–Ω—è reach_i –∑–Ω–∞—á–µ–Ω–Ω—è–º 1.0, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–æ–∫ –≤ np.prod (1 - reach_i)
        reach_i = np.clip(reach_i, 0.0, 1.0)
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ —Ñ–æ—Ä–º—É–ª–æ—é 1 - –¥–æ–±—É—Ç–æ–∫ (1 - reach_i)
        return 1 - np.prod(1 - reach_i)

    # ==== –ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –±—é–¥–∂–µ—Ç—É (–†—ñ—à–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è) ====
    if optimization_goal == '–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –±—é–¥–∂–µ—Ç—É':
        st.subheader(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: **–ú—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –±—é–¥–∂–µ—Ç—É**")
        
        if reach_target_pct <= 0:
            st.error("–¶—ñ–ª—å–æ–≤–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–µ 0%. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥—ñ–π—Å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. üéØ")
        else:
            reach_target_people = total_audience * (reach_target_pct / 100)

            model = LpProblem("Minimize_Budget_for_Reach_Target", LpMinimize)

            # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –±—é–¥–∂–µ—Ç—É –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
            budget_vars = LpVariable.dicts("Budget", df['Instrument'], lowBound=0)

            # –¶—ñ–ª—å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –º—ñ–Ω—ñ–º—ñ–∑–∞—Ü—ñ—è –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
            model += lpSum([budget_vars[instrument] for instrument in df['Instrument']]), "Total Budget"

            # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–µ —É–Ω—ñ–∫–∞–ª—å–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
            unique_reach_per_instrument_terms = []
            for _, row in df.iterrows():
                # –î–æ–¥–∞—î–º–æ —Ç–µ—Ä–º—ñ–Ω —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Freq —Ç–∞ CPM –Ω–µ –Ω—É–ª—å–æ–≤—ñ, —ñ–Ω–∞–∫—à–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –¥–∞—î –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
                if row['Freq'] != 0 and row['CPM'] != 0:
                    unique_reach_per_instrument_terms.append(budget_vars[row['Instrument']] / row['CPM'] * 1000 / row['Freq'])
                else:
                    # –Ø–∫—â–æ Freq –∞–±–æ CPM –¥–æ—Ä—ñ–≤–Ω—é—î 0, —Ü–µ–π —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –¥–∞—î —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –≤ –ª—ñ–Ω—ñ–π–Ω–æ–º—É –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—ñ
                    unique_reach_per_instrument_terms.append(0) 

            model += lpSum(unique_reach_per_instrument_terms) >= reach_target_people, "Total Unique Reach Constraint"

            # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —á–∞—Å—Ç–∫—É –±—é–¥–∂–µ—Ç—É
            # –î–ª—è —Ü—å–æ–≥–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —â–æ–± –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç –±—É–≤ –≤—ñ–¥–æ–º–∏–π –∞–±–æ –∑–º—ñ–Ω–Ω–æ—é.
            # –Ø–∫—â–æ –º–∏ –º—ñ–Ω—ñ–º—ñ–∑—É—î–º–æ –±—é–¥–∂–µ—Ç, –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç —î –æ–±'—î–∫—Ç–∏–≤–Ω–æ—é —Ñ—É–Ω–∫—Ü—ñ—î—é.
            # –¢–æ–º—É –º–∏ –ø–æ—Å–∏–ª–∞—î–º–æ—Å—å –Ω–∞ –∑–∞–≥–∞–ª—å–Ω—É —Å—É–º—É –∑–º—ñ–Ω–Ω–∏—Ö –±—é–¥–∂–µ—Ç—É.
            total_budget_lp_var = lpSum([budget_vars[instrument] for instrument in df['Instrument']])
            for _, row in df.iterrows():
                # –û–±–º–µ–∂–µ–Ω–Ω—è MinShare: budget_i >= MinShare_i * TotalBudget_LP_Var
                model += budget_vars[row['Instrument']] >= row['MinShare'] * total_budget_lp_var, f"Min Share {row['Instrument']}"
                # –û–±–º–µ–∂–µ–Ω–Ω—è MaxShare: budget_i <= MaxShare_i * TotalBudget_LP_Var
                model += budget_vars[row['Instrument']] <= row['MaxShare'] * total_budget_lp_var, f"Max Share {row['Instrument']}"

            # –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
            status = model.solve()
            
            if status == LpStatusOptimal:
                final_total_budget = value(model.objective)
                df_result = df.copy()
                
                # –ü—Ä–∏—Å–≤–æ—é—î–º–æ –≤–∏—Ä—ñ—à–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
                df_result['Budget'] = [value(budget_vars[i]) for i in df_result['Instrument']]
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
                df_result["BudgetSharePct"] = df_result["Budget"] / final_total_budget if final_total_budget > 0 else 0
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Impressions
                df_result["Impressions"] = np.where(df_result["CPM"] != 0, df_result["Budget"] / df_result["CPM"] * 1000, 0)
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Unique Reach (People)
                df_result["Unique Reach (People)"] = np.where(df_result["Freq"] != 0, df_result["Impressions"] / df_result["Freq"], 0)
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ReachPct
                df_result["ReachPct"] = df_result["Unique Reach (People)"] / total_audience
                df_result["ReachPct"] = df_result["ReachPct"].clip(upper=1.0) # –û–±–º–µ–∂–µ–Ω–Ω—è –≤—ñ–¥—Å–æ—Ç–∫–∞ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –¥–æ 100%
                
                # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—é —Ñ–æ—Ä–º—É–ª–æ—é –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ
                total_reach_prob = total_reach(df_result["Budget"].values, df_result, total_audience)
                
                st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ! üéâ")
                st.write(f"–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π **–ë—é–¥–∂–µ—Ç** –¥–ª—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è **{total_reach_prob*100:.2f}%** –∞—É–¥–∏—Ç–æ—Ä—ñ—ó: **{final_total_budget:,.2f} $**")
                st.dataframe(df_result)
            else:
                st.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å: **{LpStatus[status]}**. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –º–æ–∂–ª–∏–≤–æ –¥–æ—Å—è–≥—Ç–∏ —Ü—ñ–ª—å–æ–≤–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ (—Ü—ñ–ª—å–æ–≤–∏–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è, –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤). üßê")

    # ==== –ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (–†—ñ—à–µ–Ω–Ω—è –Ω–∞ –æ—Å–Ω–æ–≤—ñ –ª—ñ–Ω—ñ–π–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è) ====
    elif optimization_goal == '–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è':
        st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç: **–ú–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è –æ—Ö–æ–ø–ª–µ–Ω–Ω—è** (–õ—ñ–Ω—ñ–π–Ω–µ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è)")

        model = LpProblem("Maximize_Reach_LP_Approximation", LpMaximize)

        # –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö –¥–ª—è –±—é–¥–∂–µ—Ç—É –∫–æ–∂–Ω–æ–≥–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        budget_vars = LpVariable.dicts("Budget", df['Instrument'], lowBound=0)

        # –¶—ñ–ª—å–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è: –º–∞–∫—Å–∏–º—ñ–∑–∞—Ü—ñ—è —Å—É–º–∏ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –æ—Ö–æ–ø–ª–µ–Ω—å (–ª—ñ–Ω—ñ–π–Ω–∞ –∞–ø—Ä–æ–∫—Å–∏–º–∞—Ü—ñ—è)
        objective_terms = []
        for _, row in df.iterrows():
            # –î–æ–¥–∞—î–º–æ —Ç–µ—Ä–º—ñ–Ω —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ Freq —Ç–∞ CPM –Ω–µ –Ω—É–ª—å–æ–≤—ñ, —ñ–Ω–∞–∫—à–µ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –Ω–µ –¥–∞—î –æ—Ö–æ–ø–ª–µ–Ω–Ω—è
            if row['Freq'] != 0 and row['CPM'] != 0:
                objective_terms.append(budget_vars[row['Instrument']] / (row['CPM'] * row['Freq']) * 1000)
            else:
                objective_terms.append(0) # –Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑ 0 Freq –∞–±–æ CPM –Ω–µ —Å–ø—Ä–∏—è—î –æ—Ö–æ–ø–ª–µ–Ω–Ω—é –≤ —Ü—å–æ–º—É –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—ñ
        
        model += lpSum(objective_terms), "Total Unique Reach (Sum of individual)"

        # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç: —Å—É–º–∞ –±—é–¥–∂–µ—Ç—ñ–≤ –Ω–µ –ø–æ–≤–∏–Ω–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ –∑–∞–¥–∞–Ω–∏–π –∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç
        model += lpSum([budget_vars[instrument] for instrument in df['Instrument']]) <= total_budget, "Total Budget Constraint"

        # –û–±–º–µ–∂–µ–Ω–Ω—è –Ω–∞ –º—ñ–Ω—ñ–º–∞–ª—å–Ω—É/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —á–∞—Å—Ç–∫—É –±—é–¥–∂–µ—Ç—É (–≤—ñ–¥–Ω–æ—Å–Ω–æ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É)
        for _, row in df.iterrows():
            # –ë—é–¥–∂–µ—Ç —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ MinShare –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
            model += budget_vars[row['Instrument']] >= row['MinShare'] * total_budget, f"Min Share {row['Instrument']}"
            # –ë—é–¥–∂–µ—Ç —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ –Ω–µ –±—ñ–ª—å—à–µ MaxShare –≤—ñ–¥ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
            model += budget_vars[row['Instrument']] <= row['MaxShare'] * total_budget, f"Max Share {row['Instrument']}"
            
        # –†–æ–∑–≤'—è–∑–∞–Ω–Ω—è –º–æ–¥–µ–ª—ñ
        status = model.solve()
        
        if status == LpStatusOptimal:
            # –û–±'—î–∫—Ç–∏–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –æ—Ö–æ–ø–ª–µ–Ω—å (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –ª—é–¥–µ–π)
            maximized_sum_of_unique_reach_people = value(model.objective) 
            
            df_result = df.copy()
            
            # –ü—Ä–∏—Å–≤–æ—é—î–º–æ –≤–∏—Ä—ñ—à–µ–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –±—é–¥–∂–µ—Ç—É
            df_result['Budget'] = [value(budget_vars[i]) for i in df_result['Instrument']]
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ —Ñ–∞–∫—Ç–∏—á–Ω–æ –≤–∏—Ç—Ä–∞—á–µ–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç—É
            total_budget_actual_spent = df_result['Budget'].sum()
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
            df_result["BudgetSharePct"] = df_result["Budget"] / total_budget_actual_spent if total_budget_actual_spent > 0 else 0
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Impressions
            df_result["Impressions"] = np.where(df_result["CPM"] != 0, df_result["Budget"] / df_result["CPM"] * 1000, 0)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ Unique Reach (People)
            df_result["Unique Reach (People)"] = np.where(df_result["Freq"] != 0, df_result["Impressions"] / df_result["Freq"], 0)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ ReachPct
            df_result["ReachPct"] = df_result["Unique Reach (People)"] / total_audience
            df_result["ReachPct"] = df_result["ReachPct"].clip(upper=1.0)
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –∑–∞–≥–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—é —Ñ–æ—Ä–º—É–ª–æ—é –¥–ª—è –∑–≤—ñ—Ç–Ω–æ—Å—Ç—ñ
            total_reach_prob = total_reach(df_result["Budget"].values, df_result, total_audience)
            
            st.success(f"–û–ø—Ç–∏–º–∞–ª—å–Ω–µ —Ä—ñ—à–µ–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–æ! üéâ")
            st.write(f"–ú–∞–∫—Å–∏–º—ñ–∑–æ–≤–∞–Ω–µ **–û—Ö–æ–ø–ª–µ–Ω–Ω—è** (–∑–∞ –ª—ñ–Ω—ñ–π–Ω–∏–º –Ω–∞–±–ª–∏–∂–µ–Ω–Ω—è–º): **{maximized_sum_of_unique_reach_people:,.0f} –ª—é–¥–µ–π**")
            st.write(f"–§–∞–∫—Ç–∏—á–Ω–µ **–û—Ö–æ–ø–ª–µ–Ω–Ω—è** (–∑–∞ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—é —Ñ–æ—Ä–º—É–ª–æ—é): **{total_reach_prob*100:.2f}%** –∞—É–¥–∏—Ç–æ—Ä—ñ—ó")
            st.write(f"–í–∏—Ç—Ä–∞—á–µ–Ω–∏–π **–ë—é–¥–∂–µ—Ç**: **{total_budget_actual_spent:,.2f} $** (–∑ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö {total_budget:,.2f} $)")
            
            st.dataframe(df_result)
        else:
            st.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä—ñ—à–µ–Ω–Ω—è. –°—Ç–∞—Ç—É—Å: **{LpStatus[status]}**. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –º–æ–∂–ª–∏–≤–æ –¥–æ—Å—è–≥—Ç–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑ –∑–∞–¥–∞–Ω–∏–º–∏ –æ–±–º–µ–∂–µ–Ω–Ω—è–º–∏ (–∑–∞–≥–∞–ª—å–Ω–∏–π –±—é–¥–∂–µ—Ç, –º—ñ–Ω—ñ–º–∞–ª—å–Ω—ñ/–º–∞–∫—Å–∏–º–∞–ª—å–Ω—ñ —á–∞—Å—Ç–∫–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤). üßê")

    # ==== –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —É Excel ====
    output = io.BytesIO()
    wb = Workbook()
    ws = wb.active
    ws.title = "–ì—ñ–±—Ä–∏–¥–Ω–∏–π —Å–ø–ª—ñ—Ç"
    
    excel_cols = ["Instrument", "CPM", "CPR", "Freq", "MinShare", "MaxShare", "Budget", "BudgetSharePct", "Impressions", "Unique Reach (People)", "ReachPct"]

    df_to_save = df_result[excel_cols].copy()
    
    final_total_budget = df_result["Budget"].sum()
    final_total_reach_prob = total_reach(df_result["Budget"].values, df_result, total_audience)
    final_total_reach_people_linear_sum = df_result["Unique Reach (People)"].sum() # –°—É–º–∞ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–∏—Ö –æ—Ö–æ–ø–ª–µ–Ω—å
    
    # –î–æ–¥–∞—î–º–æ —Ä—è–¥–æ–∫ "TOTAL" –∑ —Å—É–º–∞—Ä–Ω–∏–º–∏ –∑–Ω–∞—á–µ–Ω–Ω—è–º–∏
    df_to_save.loc[len(df_to_save)] = [
        "TOTAL", np.nan, np.nan, np.nan, 
        df_result['MinShare'].sum(), # –°—É–º–∞ MinShare
        df_result['MaxShare'].sum(), # –°—É–º–∞ MaxShare
        final_total_budget, 
        1.0, # 100% –¥–ª—è –∑–∞–≥–∞–ª—å–Ω–æ—ó —á–∞—Å—Ç–∫–∏ –±—é–¥–∂–µ—Ç—É
        df_result["Impressions"].sum(), 
        final_total_reach_people_linear_sum, # –°—É–º–∞ —É–Ω—ñ–∫–∞–ª—å–Ω–æ–≥–æ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è (–ª—é–¥–µ–π)
        f"{final_total_reach_prob*100:.2f}%" # –ó–∞–≥–∞–ª—å–Ω–µ –æ—Ö–æ–ø–ª–µ–Ω–Ω—è –∑–∞ –Ω–µ–ª—ñ–Ω—ñ–π–Ω–æ—é —Ñ–æ—Ä–º—É–ª–æ—é
    ]

    # –ó–∞–ø–∏—Å DataFrame –≤ Excel
    for r in dataframe_to_rows(df_to_save, index=False, header=True):
        ws.append(r)
    
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –∫–æ–ª–æ–Ω–∫–∏ "BudgetSharePct" —è–∫ –≤—ñ–¥—Å–æ—Ç–∫–∏
    budget_share_pct_col = excel_cols.index("BudgetSharePct") + 1
    for row in ws.iter_rows(min_row=2, max_row=1+len(df_result), min_col=budget_share_pct_col, max_col=budget_share_pct_col):
        for cell in row:
            cell.number_format = '0.00%'
            
    # –î–æ–¥–∞–≤–∞–Ω–Ω—è –≥—ñ—Å—Ç–æ–≥—Ä–∞–º–∏
    chart = BarChart()
    chart.type = "col"
    chart.title = "–ë—é–¥–∂–µ—Ç –ø–æ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º (%)"
    chart.y_axis.title = "Budget Share (%)"
    chart.x_axis.title = "–Ü–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏"
    data = Reference(ws, min_col=budget_share_pct_col, min_row=1, max_row=1+len(df_result)) # –î–∞–Ω—ñ –¥–ª—è –≥—Ä–∞—Ñ—ñ–∫–∞ (—á–∞—Å—Ç–∫–∞ –±—é–¥–∂–µ—Ç—É)
    categories = Reference(ws, min_col=1, min_row=2, max_row=1+len(df_result)) # –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó (–Ω–∞–∑–≤–∏ —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ñ–≤)
    chart.add_data(data, titles_from_data=True)
    chart.set_categories(categories)
    ws.add_chart(chart, f"L{budget_share_pct_col}") # –†–æ–∑–º—ñ—â–µ–Ω–Ω—è –≥—Ä–∞—Ñ—ñ–∫–∞ –≤ –∞—Ä–∫—É—à—ñ Excel

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–æ–±–æ—á–æ—ó –∫–Ω–∏–≥–∏ —É –±–∞–π—Ç–æ–≤–∏–π –ø–æ—Ç—ñ–∫
    wb.save(output)
    output.seek(0)
    
    # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è Excel —Ñ–∞–π–ª—É
    st.download_button(
        label="–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ (Excel)",
        data=output,
        file_name="Digital_Split_Hybrid.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
